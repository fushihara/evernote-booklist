{"version":3,"file":"evernote.js","sourceRoot":"","sources":["../src/evernote.ts"],"names":[],"mappings":"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","sourcesContent":["const Evernote = require(\"evernote\");\r\nimport * as dateFormat from \"dateformat\";\r\nexport namespace EvernoteClient {\r\n  export type UserData = {\r\n    id: number,//123456\r\n    name: string,//あいうえお\r\n    shardId: string,//s123\r\n    username: string//aiueo\r\n  }\r\n  export type NoteBook = {\r\n    title: string,\r\n    size: number,\r\n    updateDate: Date,\r\n    createdDate: Date,\r\n    guid: string,\r\n    notebookName: string\r\n    notebookGuid: string\r\n  };\r\n  export async function getEvernoteAllNoteData(args: {\r\n    developerToken: string,\r\n    words: string,\r\n    order: string,\r\n    ascending: boolean\r\n  }): Promise<{ userData: UserData, noteBooks: NoteBook[] }> {\r\n    const client = new Evernote.Client({ token: args.developerToken, sandbox: false });\r\n    const userStore = client.getUserStore();\r\n    const userData = await getUser(userStore);\r\n    const noteStore = client.getNoteStore();\r\n    const resultUserData: UserData = {\r\n      id: Number(userData.id),\r\n      name: String(userData.name),\r\n      shardId: String(userData.shardId),\r\n      username: String(userData.username),\r\n    }\r\n\r\n    const allNoteBooks = await getAllNotebooks(noteStore);\r\n    for (let notebook of allNoteBooks) {\r\n      //console.log(notebook.name + \"/\" + notebook.guid)\r\n    }\r\n    let order = \"created\";\r\n    switch (args.order) {\r\n      case \"created\":\r\n      case \"updated\":\r\n      case \"title\":\r\n        order = args.order;\r\n    }\r\n    const allNote = await getAllNote(noteStore, args.words, order as \"created\" | \"updated\" | \"title\", args.ascending);\r\n    const result: NoteBook[] = [];\r\n    for (let note of allNote.notes) {\r\n      const title = note.title;\r\n      const noteGuid = note.guid;\r\n      const size = note.contentLength;\r\n      const updateDate = new Date(note.updated);\r\n      const createdDate = new Date(note.created);\r\n      const notebookGuid = String(note.notebookGuid);\r\n      const notebookName = [...allNoteBooks].filter(a => a.guid == notebookGuid).map(a => a.name)[0] || notebookGuid;\r\n      const updateDateStr = dateFormat(updateDate, \"yyyy/mm/dd HH:MM:ss\");\r\n      const createdDateStr = dateFormat(createdDate, \"yyyy/mm/dd HH:MM:ss\");\r\n      result.push({\r\n        title,\r\n        guid: noteGuid,\r\n        createdDate: createdDate,\r\n        updateDate,\r\n        size,\r\n        notebookName,\r\n        notebookGuid\r\n      });\r\n      //console.log(`${String(allNote.notes.indexOf(note) + 1).padStart(3, \" \")} ${createdDateStr} ${updateDateStr} ${title} (${size} byte)`);\r\n      //console.log(`  ${notebookName}`);\r\n    }\r\n    return {\r\n      noteBooks: result,\r\n      userData: resultUserData\r\n    };\r\n  }\r\n}\r\nasync function getUser(userStore: any) {\r\n  return await userStore.getUser();\r\n}\r\n//@ts-ignore\r\nasync function getAllNotebooks(noteStore: Evernote.NoteStoreClient) {\r\n  //@ts-ignore\r\n  return await noteStore.listNotebooks();\r\n}\r\n//@ts-ignore\r\nasync function getAllNote(noteStore: Evernote.NoteStoreClient, words: string, order: \"created\" | \"updated\" | \"title\", ascending: boolean) {\r\n  let orderReq = 1;\r\n  switch (order) {\r\n    case \"created\": orderReq = 1; break;\r\n    case \"updated\": orderReq = 2; break;\r\n    case \"title\": orderReq = 5; break;\r\n  }\r\n  //@ts-ignore\r\n  const filter = new Evernote.NoteStore.NoteFilter({\r\n    words: words,\r\n    ascending: ascending,\r\n    order: orderReq, // 1:created 2:updated 3:RELEVANCE 4:UPDATE_SEQUENCE_NUMBER 5:title\r\n  });\r\n  //@ts-ignore\r\n  var spec = new Evernote.NoteStore.NotesMetadataResultSpec({\r\n    includeTitle: true,\r\n    includeContentLength: true,\r\n    includeCreated: true,\r\n    includeUpdated: true,\r\n    includeDeleted: true,\r\n    includeNotebookGuid: true,\r\n  });\r\n  // https://dev.evernote.com/doc/reference/NoteStore.html#Fn_NoteStore_findNotesMetadata\r\n  //@ts-ignore\r\n  return await noteStore.findNotesMetadata(filter, 0, 500, spec)\r\n}\r\n"]}