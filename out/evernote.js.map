{"version":3,"file":"evernote.js","sourceRoot":"","sources":["../src/evernote.ts"],"names":[],"mappings":";;AAAA,MAAM,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACrC,yCAAyC;AACzC,IAAiB,cAAc,CAyC9B;AAzCD,WAAiB,cAAc;IAStB,KAAK,UAAU,sBAAsB,CAAC,cAAsB;QACjE,MAAM,MAAM,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,cAAc,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;QAC9E,MAAM,SAAS,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;QACxC,MAAM,YAAY,GAAG,MAAM,eAAe,CAAC,SAAS,CAAC,CAAC;QACtD,KAAK,IAAI,QAAQ,IAAI,YAAY,EAAE;YACjC,kDAAkD;SACnD;QACD,MAAM,OAAO,GAAG,MAAM,UAAU,CAAC,SAAS,CAAC,CAAC;QAC5C,MAAM,MAAM,GAAe,EAAE,CAAC;QAC9B,KAAK,IAAI,IAAI,IAAI,OAAO,CAAC,KAAK,EAAE;YAC9B,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YACzB,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;YAC3B,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC;YAChC,MAAM,UAAU,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC1C,MAAM,WAAW,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC3C,MAAM,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC/C,MAAM,YAAY,GAAG,CAAC,GAAG,YAAY,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,YAAY,CAAC;YAC/G,MAAM,aAAa,GAAG,UAAU,CAAC,UAAU,EAAE,qBAAqB,CAAC,CAAC;YACpE,MAAM,cAAc,GAAG,UAAU,CAAC,WAAW,EAAE,qBAAqB,CAAC,CAAC;YACtE,MAAM,CAAC,IAAI,CAAC;gBACV,KAAK;gBACL,IAAI,EAAE,QAAQ;gBACd,WAAW,EAAE,WAAW;gBACxB,UAAU;gBACV,IAAI;gBACJ,YAAY;aACb,CAAC,CAAC;YACH,wIAAwI;YACxI,mCAAmC;SACpC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IA/BqB,qCAAsB,yBA+B3C,CAAA;AACH,CAAC,EAzCgB,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAyC9B;AACD,YAAY;AACZ,KAAK,UAAU,eAAe,CAAC,SAAmC;IAChE,YAAY;IACZ,OAAO,MAAM,SAAS,CAAC,aAAa,EAAE,CAAC;AACzC,CAAC;AACD,YAAY;AACZ,KAAK,UAAU,UAAU,CAAC,SAAmC;IAC3D,YAAY;IACZ,MAAM,MAAM,GAAG,IAAI,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC;QAC/C,KAAK,EAAE,EAAE;QACT,SAAS,EAAE,KAAK;QAChB,KAAK,EAAE,CAAC;KACT,CAAC,CAAC;IACH,YAAY;IACZ,IAAI,IAAI,GAAG,IAAI,QAAQ,CAAC,SAAS,CAAC,uBAAuB,CAAC;QACxD,YAAY,EAAE,IAAI;QAClB,oBAAoB,EAAE,IAAI;QAC1B,cAAc,EAAE,IAAI;QACpB,cAAc,EAAE,IAAI;QACpB,cAAc,EAAE,IAAI;QACpB,mBAAmB,EAAE,IAAI;KAC1B,CAAC,CAAC;IACH,YAAY;IACZ,OAAO,MAAM,SAAS,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,CAAA;AAChE,CAAC","sourcesContent":["const Evernote = require(\"evernote\");\r\nimport * as dateFormat from \"dateformat\";\r\nexport namespace EvernoteClient {\r\n  export type NoteBook = {\r\n    title: string,\r\n    size: number,\r\n    updateDate: Date,\r\n    createdDate: Date,\r\n    guid: string,\r\n    notebookName: string\r\n  };\r\n  export async function getEvernoteAllNoteData(developerToken: string): Promise<NoteBook[]> {\r\n    const client = new Evernote.Client({ token: developerToken, sandbox: false });\r\n    const noteStore = client.getNoteStore();\r\n    const allNoteBooks = await getAllNotebooks(noteStore);\r\n    for (let notebook of allNoteBooks) {\r\n      //console.log(notebook.name + \"/\" + notebook.guid)\r\n    }\r\n    const allNote = await getAllNote(noteStore);\r\n    const result: NoteBook[] = [];\r\n    for (let note of allNote.notes) {\r\n      const title = note.title;\r\n      const noteGuid = note.guid;\r\n      const size = note.contentLength;\r\n      const updateDate = new Date(note.updated);\r\n      const createdDate = new Date(note.created);\r\n      const notebookGuid = String(note.notebookGuid);\r\n      const notebookName = [...allNoteBooks].filter(a => a.guid == notebookGuid).map(a => a.name)[0] || notebookGuid;\r\n      const updateDateStr = dateFormat(updateDate, \"yyyy/mm/dd HH:MM:ss\");\r\n      const createdDateStr = dateFormat(createdDate, \"yyyy/mm/dd HH:MM:ss\");\r\n      result.push({\r\n        title,\r\n        guid: noteGuid,\r\n        createdDate: createdDate,\r\n        updateDate,\r\n        size,\r\n        notebookName\r\n      });\r\n      //console.log(`${String(allNote.notes.indexOf(note) + 1).padStart(3, \" \")} ${createdDateStr} ${updateDateStr} ${title} (${size} byte)`);\r\n      //console.log(`  ${notebookName}`);\r\n    }\r\n    return result;\r\n  }\r\n}\r\n//@ts-ignore\r\nasync function getAllNotebooks(noteStore: Evernote.NoteStoreClient) {\r\n  //@ts-ignore\r\n  return await noteStore.listNotebooks();\r\n}\r\n//@ts-ignore\r\nasync function getAllNote(noteStore: Evernote.NoteStoreClient) {\r\n  //@ts-ignore\r\n  const filter = new Evernote.NoteStore.NoteFilter({\r\n    words: \"\",\r\n    ascending: false,\r\n    order: 2, // 1:created 2:updated 3:RELEVANCE 4:UPDATE_SEQUENCE_NUMBER 5:title\r\n  });\r\n  //@ts-ignore\r\n  var spec = new Evernote.NoteStore.NotesMetadataResultSpec({\r\n    includeTitle: true,\r\n    includeContentLength: true,\r\n    includeCreated: true,\r\n    includeUpdated: true,\r\n    includeDeleted: true,\r\n    includeNotebookGuid: true,\r\n  });\r\n  //@ts-ignore\r\n  return await noteStore.findNotesMetadata(filter, 0, 500, spec)\r\n}\r\n"]}