{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as express from \"express\";\r\nimport { mergeDateformat, getIpv4Address, requestから接続情報を取得 } from \"./utils\";\r\n// configで読み込むファイル名はこちら。値のマージも可能。 https://github.com/lorenwest/node-config/wiki/Configuration-Files\r\nimport { get as configGet } from \"config\";\r\nimport { EvernoteClient } from \"./evernote\";\r\nconst log = (message: string) => console.log(mergeDateformat(message));\r\n\r\nconst app = express();\r\nconst config = {\r\n  express: {\r\n    urlPort: configGet<number>(\"express.urlPort\"),\r\n    urlPrefix: configGet<string>(\"express.urlPrefix\"),\r\n  }\r\n};\r\n\r\nprocess.on('unhandledRejection', (reason, _promise) => {\r\n  console.error(reason);\r\n});\r\nclass Main {\r\n  async init() {\r\n    app.use((request: express.Request, _response: express.Response, next) => {\r\n      requestから接続情報を取得(request).then(a => {\r\n        log(JSON.stringify(a, null, \"  \"));\r\n      });\r\n      next();\r\n    })\r\n    /**\r\n  * リクエストデータを取得する方法\r\n  *   app.get の中で:keywordId の様に指定したキーワードの値\r\n  *     request.params.keywordId\r\n  *   getパラメーターの中で指定された値\r\n  *     request.query.keywordId\r\n  *   postパラメーターの中で指定された値\r\n  *     request.body.column\r\n  *   POSTでパラメータを受信する方法。ヘッダーが大事\r\n  *     await fetch(\"http://127.0.0.1:51919/test/yyyy\",{method:\"post\",body:\"hoge=aaaaaaaaaaaaaa\",headers:{\"Content-Type\":\"application/x-www-form-urlencoded\"}})\r\n  */\r\n    app.get(config.express.urlPrefix, async (request: express.Request, response: express.Response) => {\r\n      const token = String(request.query.developer_token || \"\")\r\n      const words = String(request.query.words || \"\")\r\n      const order = String(request.query.order || \"\")\r\n      const ascending = String(request.query.ascending || \"\") == \"1\";\r\n      response.setHeader(\"Access-Control-Allow-Origin\", \"*\");\r\n      if (token == \"\") {\r\n        response.status(403).end();\r\n        return;\r\n      }\r\n      EvernoteClient.getEvernoteAllNoteData({\r\n        developerToken: token,\r\n        words,\r\n        order,\r\n        ascending\r\n      }).then(noteBookList => {\r\n        response.status(200).json(noteBookList).end();\r\n      }).catch((err: any) => {\r\n        if (Object(err) === err && err.parameter === \"authenticationToken\") {\r\n          log(\"evernote api 認証失敗\");\r\n          response.status(403).json({}).end();\r\n          return;\r\n        }\r\n        log(JSON.stringify(err, null, \"  \"));\r\n        response.status(500).end();\r\n        return;\r\n      });\r\n    });\r\n    app.listen(config.express.urlPort, () => {\r\n      log(\"ready\")\r\n      log(` http://localhost:${config.express.urlPort}${config.express.urlPrefix}`);\r\n      getIpv4Address().forEach(address => {\r\n        log(` http://${address}:${config.express.urlPort}${config.express.urlPrefix}`);\r\n      });\r\n    });\r\n  }\r\n}\r\nnew Main().init();\r\n"]}